   public static int minimax(int depth, int nodeIndex, boolean isMax, int[] values, int alpha, int beta) {
        if (depth == 3) {
            return values[nodeIndex];
        }
        
        if (isMax) {
            int bestValue = Integer.MIN_VALUE;
            for (int i = 0; i < 2; i++) {
                int value = minimax(depth + 1, nodeIndex * 2 + i, false, values, alpha, beta);
                bestValue = Math.max(bestValue, value);
                alpha = Math.max(alpha, bestValue);
                if (beta <= alpha) {
                    break;
                }
            }
            return bestValue;
        } else {
            int bestValue = Integer.MAX_VALUE;
            for (int i = 0; i < 2; i++) {
                int value = minimax(depth + 1, nodeIndex * 2 + i, true, values, alpha, beta);
                bestValue = Math.min(bestValue, value);
                beta = Math.min(beta, bestValue);
                if (beta <= alpha) {
                    break;
                }
            }
            return bestValue;
        }
    }
    
    public static void main(String[] args) {
        int[] values = {3, 5, 2, 9, 12, 5, 23, 23};
        int result = minimax(0, 0, true, values, Integer.MIN_VALUE, Integer.MAX_VALUE);
        System.out.println("The optimal value is : " + result);
    }
}